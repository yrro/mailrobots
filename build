#!/usr/bin/python

from __future__ import print_function

import ConfigParser as configparser
import glob
import os
import posix1e
import tempfile
import sys

users = {}

for p in glob.glob (os.path.join (os.path.dirname (__file__), 'domains', '*', 'passwd.in')):
	if not os.path.isfile (p):
		continue

	domain = os.path.basename (os.path.dirname (p))
	users[domain] = {}

	try:
		c = configparser.RawConfigParser ()
		c.read (p)
		for sec in c.sections ():
			t, n = sec.split (':')
			obj = {}
			if t == 'user':
				if c.has_option (sec, 'password'):
					obj['password'] = c.get (sec, 'password')
				else:
					obj['password'] = '!'

				if c.has_option (sec, 'quota'):
					obj['quota'] = c.get (sec, 'quota')
				elif c.has_section ('default:user') and c.has_option ('default:user', 'quota'):
					obj['quota'] = c.get ('default:user', 'quota')

				users[domain][n] = obj
			elif t == 'default':
				pass
			else:
				raise Exception ('Unknown object type: {0}'.format (t))
	except:
		print ('Error in "{0}":'.format (p), file=sys.stderr)
		raise

for dname, domain in users.items ():
	pfname = os.path.join (os.path.dirname (__file__), 'domains', dname, 'passwd')
	if os.path.exists (pfname):
		pfacl = posix1e.ACL (file=pfname)
	else:
		print ('Creating {0}; run the permission script to set up permissions!'.format (pfname), file=sys.stderr)
		pfacl = None

	tpf = tempfile.NamedTemporaryFile (mode='w', dir=os.path.dirname (pfname), delete=False)
	try:
		for uname, user in domain.items ():
			raw_credentials = {}
			raw_credentials[uname] = user['password']

			quota = 'userdb_quota_rule=*:bytes={0}'.format (user['quota']) if 'quota' in user else ''
			for u, p in raw_credentials.items ():
				print ('{0}:{1}::::{2}::{3}'.format (u, p, os.path.abspath (os.path.join (os.path.dirname (__file__), 'domains', dname, 'users', uname)), quota), file=tpf)
		if pfacl:
			pfacl.applyto (tpf.fileno ())
		tpf.close ()
	except:
		os.unlink (tpf.name)
		raise
	else:
		os.rename (tpf.name, pfname)

# vim: ts=4 sts=4 sw=4 noet
